Important, low-level stuff:
XML's beginning to look overkill again compared to plain text matrices, especially if we don't need a pattern sequence, we just keep copying them.  At any rate, make sure saving and loading files still works!
Using floats in the range of 0 to 5 may be straightforward to look at, but we're going to turn these software values into analogue signals via reasonably cheap 12-bit DACs, so the 0 to 60 range integers will NOT be divided by 12 to form 0 to 5 range floats.  Instead, they'll be multiplied by 68.25 to form 0 to 4095 range integers.
In order to C-prepare this Python code, I'll replace the variable length arrays with fixed length ones, and include a new single-dimensional array to store the lengths of all the patterns, and a new variable to store the number of patterns (in other words, the length of the song).  I guess the logical consequence of this is that I'll need to work out whether decreasing then re-increasing a pattern's length should still erase the affected rows or not, and the same goes for removing then adding back patterns.

Essential features:
There should be looping options: loop through current pattern forever; cycle through playing all (non-blank) patterns forever; cycle through playing all (non-blank) patterns once, then stop.  (Pattern loop, song loop, song one-shot.)
There should be one song file that Stepper 3 always loads from and saves to.  If it doesn't exist yet, it should create it.  This will be the equivalent of saving its whole memory to battery backup memory.
Refactor the code before translating it into C or C++.

Nice features:
I need to improve the README file.
Make an ADSR envelope generator; use the attenuator with that instead.
Make a voltage controlled slew limiter module.  (Basically like the sequencer's slide and the delay module.)
Make a sample and hold module.
Make a voltage controlled delay / echo module.  (With a set sized array, cycled through at a voltage controlled speed, with a voltage controlled amount of feedback and a voltage controlled dry/wet mix.)
Have a go at making a chorus.  (I gather this is something like an extremely short delay with only one copy of the signal and a slightly variable speed.)

Distant dreams:
A multimode filter would be nice, but is probably beyond my abilities.
A realtime user interface version of the sequencer, that lets you edit rather than passively play notation, with load and save facilities and audio output (even if just sine waves and white noise) would be great, and pave the way for a hardware version of it.
A port of this written in C or C++ would be great.  It would not only be faster, but could be integrated with hardware via an Arduino board.
I need to think about whether the software modules should be part of the file format (so songs can include information about which modules are used, and how they're hooked up to the sequencer and each other), or not.  They might work as an extension to the main file format, but the main focus should be on the sequencer, and allowing it to be used with real world synthesisers, not tying it down to a software-only implementation.
Allow the user to change the tempo with each event row.  It works best as a 3-digit int, not as a bipolar control voltage, so it would make more sense to set it within the pattern, in a new kind of non-channel-specific column, than via CV in.
