Important, low-level stuff:
Stepper 3 should default to a CV1 of '00' (off), not '..' (continue what it was in the last step), because for this one particular interface to Surf, CV1 is being used for the note's accent.
Store everything internally as ints between 0 and 60, and only convert to chars between '00' and '60' when saving files and viewing diagnostics info.

Nice features:
I need to improve the README file.
I should finish implementing the methods necessary to in turn build a realtime interface, eg moving a virtual cursor around, getting and setting the values at that cursor's current event position and so on.
I should implement multiple patterns, switching between them, chaining them together, copying them and removing them.
I should work out a song file format, that stores (preferably in XML to make life easier for other people) the song name, artist name, arbitrary information, all events for every channel of each pattern, and the ordering of all the patterns.  I should then get the sequencer to read and write these files.  (The idea being that the hardware implementation could write them to SD cards.)
Make an ADSR envelope generator; use the attenuator with that instead.
Make a voltage controlled slew limiter module.  (Basically like the sequencer's slide and the delay module.)
Make a sample and hold module.
Make a voltage controlled delay / echo module.  (With a set sized array, cycled through at a voltage controlled speed, with a voltage controlled amount of feedback and a voltage controlled dry/wet mix.)
Have a go at making a chorus.  (I gather this is something like an extremely short delay with only one copy of the signal and a slightly variable speed.)

Distant dreams:
A multimode filter would be nice, but is probably beyond my abilities.
A realtime user interface version of the sequencer, that lets you edit rather than passively play notation, with load and save facilities and audio output (even if just sine waves and white noise) would be great, and pave the way for a hardware version of it.
A port of this written in C would be great.  It would not only be faster, but could be integrated with hardware via an Arduino board.
I need to think about whether the software modules should be part of the file format (so songs can include information about which modules are used, and how they're hooked up to the sequencer and each other), or not.  They might work as an extension to the main file format, but the main focus should be on the sequencer, and allowing it to be used with real world synthesisers, not tying it down to a software-only implementation.
Allow the user to change the tempo with each event row.  It works best as a 3-digit int, not as a bipolar control voltage, so it would make more sense to set it within the pattern, in a new kind of non-channel-specific column, than via CV in.
